searchState.loadedDescShard("orbit", 0, "Errors that can occur in the Orbit framework\nVersion of the Orbit UI Framework\nComponent model for Orbit UI framework\nType-safe builder for props\nAdvanced props builder with validation and required field …\nEnhanced event system for Orbit UI framework\nReturns the argument unchanged.\nInitialize the Orbit framework with default settings\nCalls <code>U::from(self)</code>.\nMain parser module for .orbit files\nRe-export of common types for convenience\nUpdated renderer module with WGPU support\nState management system for the Orbit UI framework\nCreates a validator that ensures a field meets a condition\nTrait for type-erased components that can participate in …\nComponent is about to be unmounted\nComponent is about to be updated\nA callback function that can be passed as a prop\nComponent trait - implemented by all UI components\nErrors that can occur during component operations\nFactory for creating component instances\nWraps a component instance with its metadata\nComponent registry for storing component factories\nContext passed to components providing access to state, …\nProvider for component context\nComponent is created but not yet mounted\nError downcasting props or component\nInvalid lifecycle transition\nInvalid props type for the component\nType for lifecycle callback functions\nLifecycle hook options for components\nManages the lifecycle of components\nLifecycle phase of a component\nError acquiring lock\nError mounting component\nComponent is fully mounted and operational\nComponent is being mounted\nProps trait - implemented by all component props types\nThe props type for this component\nProps type mismatch\nError rendering component\nMarker trait to ensure props are sized\nComponent type not found in registry\nError unmounting component\nComponent is unmounted and inactive\nComponent is being unmounted\nError updating component\nComponent is updating\nCalled after the component has updated\nCalled after component updates\nConvert to Any for downcasting\nConvert to Any for downcasting\nConvert to Any for downcasting\nConvert to mutable Any for downcasting\nConvert to mutable Any for downcasting\nConvert to mutable Any for downcasting\nCalled before component is unmounted\nCalled before component unmounts\nPrepare for unmounting the component\nCalled before component updates with new props\nCalled before component updates with new props\nClone the props\nConvenience function for creating a callback\nComponent instance being managed\nContext passing and parent-child communication\nContext for the component\nContext provider for parent-child communication\nCreate a new component instance\nCreate a new component instance\nCreate a strongly typed component instance\nError types for component operations\nGet event emitter\nEvent emitter for handling UI events\nExecute all before unmount callbacks\nExecute all before update callbacks\nExecute lifecycle hooks for a specific phase\nExecute all mount callbacks\nExecute all unmount callbacks\nExecute all update callbacks\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe function to call\nInitialize the component - called immediately after …\nInitialize the component\nInitialize the component\nComponent instance\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComponent lifecycle management for Orbit UI framework\nLifecycle hooks container\nCurrent lifecycle phase\nMount component - called when component is first added to …\nMount the component\nMount the component\nCreate a new component instance\nCreate a new empty set of lifecycle hooks\nCreate a new context\nCreate a new component registry\nEnhanced node implementation with event delegation support\nRegister a callback for before the component unmounts\nRegister a callback for before the component unmounts\nCalled when component is about to be unmounted\nRegister a callback for before the component updates\nRegister a callback for before the component updates\nCalled before updating the DOM/renderer\nRegister a callback for when the component is mounted\nRegister a callback for when the component is mounted\nCalled when component is mounted to the DOM/renderer\nRegister a callback for when the component unmounts\nRegister a callback for when the component unmounts\nCalled when component is removed\nRegister a callback for when the component updates\nRegister a callback for when the component updates\nCalled when props or state change\nParent context provider\nCurrent phase of the component\nProps module for component properties\nCurrent props\nRegister a component type\nRender component - returns child nodes\nRender the component\nRender the component\nSet the current lifecycle phase\nCreate state with initial value\nState container for managing component and app state\nComponent type ID for type checking\nGet the type name for debugging\nUnmount component - called when component is removed from …\nUnmount the component\nUnmount the component\nUpdate component with new props\nUpdate the component with new props\nUpdate component with new props\nUpdate component with boxed props\nCreate a new context with a parent context provider\nA callback function that can be passed as a prop\nProvider for component context\nA type-erased value that can be stored in a context\nCall the callback with the given arguments\nConvenience function for creating a callback\nGet a value from the context\nThe function to call\nCheck if a type exists in the context\nCreate a new callback\nCreate a new context provider\nParent context provider\nSet a value in the context\nRemove a value from the context\nCreate a context provider with a parent\nErrors that can occur during component operations\nError downcasting props or component\nInvalid lifecycle transition\nInvalid props type for the component\nError acquiring lock\nError mounting component\nProps type mismatch\nError rendering component\nComponent type not found in registry\nError unmounting component\nError updating component\nManages the lifecycle of components\nComponent instance being managed\nContext for the component\nGet the current lifecycle phase\nGet a reference to the component instance\nGet a reference to the component’s context\nInitialize the component (post-creation)\nMount the component to the tree\nCreate a new lifecycle manager for a component\nCurrent phase of the component\nRender the component\nUnmount the component from the tree\nUpdate the component with new props\nA node in the UI tree with event delegation support\nAdd an attribute\nAdd a child node\nGet attributes\nNode attributes\nGet a reference to the node’s children\nChild nodes\nGet the node’s children mutably\nGet the component instance\nComponent instance\nGet the component instance mutably\nDispatch an event to this node\nGet the node’s event delegate\nEvent delegate for this node\nReturns the argument unchanged.\nGet the node’s ID\nUnique identifier for this node\nGet the node’s ID as usize\nCalls <code>U::from(self)</code>.\nCreate a new node\nA simple property validator that can be composed of …\nValue is not present, but there is a default\nA property had an invalid value\nA required property was missing\nMultiple validation errors\nError indicating validation problems with props\nTrait for props validation\nRepresents a property that can be required or optional …\nBuilder for constructing component props with validation\nValue is required but not present\nA property had a type mismatch\nValue is present\nType-safe builder for props\nAdvanced props builder with validation and required field …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnhanced props system for Orbit UI components\nThe props being built\nValidate the props\nCreates a validator that ensures a field meets a condition\nOptional validator to run before completion\nThe validators to run\nActual type\nExpected type\nName of the property\nName of the property\nDescription of the validation error\nA simple property validator that can be composed of …\nValue is not present, but there is a default\nA property had an invalid value\nA required property was missing\nMultiple validation errors\nError indicating validation problems with props\nTrait for props validation\nRepresents a property that can be required or optional …\nBuilder for constructing component props with validation\nValue is required but not present\nA property had a type mismatch\nValue is present\nAdd a validator to the composite\nBuild the props, running validation\nGet the value, returning default if needed\nCheck if value is present\nCreate a new value\nCreate a new props builder\nCreate a new composite validator\nCreate a new optional value with default\nCreate a new required value\nThe props being built\nSet the value\nValidate the props\nOptional validator to run before completion\nThe validators to run\nSet a validator for the props\nActual type\nExpected type\nName of the property\nName of the property\nDescription of the validation error\nContext passed to components providing access to state and …\nA node in the UI tree\nNode attributes\nGet a reference to this node’s children\nChild nodes\nGet a mutable reference to this node’s children\nComponent instance\nEvent emitter for handling UI events\nReturns the argument unchanged.\nReturns the argument unchanged.\nNode ID\nGet this node’s ID value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nState container for managing component and app state\nEvent delegation system for Orbit UI framework\nEvent dispatcher for typed event handling\nEvent emitter for component events\nEvent trait for OrbitRS events system\nEvent is traveling up from target to parent (DOM bubbling …\nEvent is traveling down from parent to target (DOM …\nAn enhanced event that includes propagation information\nType of callback for delegated events\nEvent delegate manages capturing, targeting, and bubbling …\nType alias for event handler function\nControls how an event propagates through the component tree\nType alias for handler storage map\nSpecifies the event propagation phase\nEvent is at the target component\nAdd a child delegate for capturing events\nRegister a handler for an event type in the bubbling phase\nMap of event type to callbacks registered for bubbling …\nHelper to build an event delegation tree from a component …\nRegister a handler for an event type in the capturing phase\nMap of event type to callbacks registered for capturing …\nChild delegates for capturing events down\nComponent ID for identification during propagation\nThe component that is currently handling the event\nWhether the default action should be prevented\nDispatch an event starting from this delegate\nThe original event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if default is prevented\nCheck if propagation is stopped\nCreate a new delegated event\nCreate a new event propagation\nCreate a new event delegate\nRegister a handler for an event type for this target only\nParent delegate for bubbling events up\nThe current propagation phase\nPrevent the default action for this event\nPrevent the default action\nPropagation control\nSet the parent delegate for bubbling events\nStop propagation of this event\nStop event propagation\nWhether the event should continue propagating\nMap of event type to callbacks registered for just that …\nThe component that is the original target of the event\nThread-safe event dispatcher for a specific event type\nHandler trait for processing events\nAdd a new event handler\nRemove all handlers\nDispatch an event to all handlers\nReturns the argument unchanged.\nHandle an event\nList of event handlers protected by a mutex\nCalls <code>U::from(self)</code>.\nCreate a new event dispatcher\nAdd a handler function directly\nType for event handler callbacks\nEvent emitter for handling component events\nRemove all handlers\nEmit an event\nReturns the argument unchanged.\nEvent handlers grouped by event type\nCalls <code>U::from(self)</code>.\nCreate a new event emitter\nRegister an event handler\nGeneric event trait\nConvert to Any for downcasting\nConvert to Any for downcasting (mutable)\nClone the event\nGet the event type name\nRe-export winit event types\nEmitted when the event loop is about to block and wait for …\nEmitted when the OS sends an event to a device.\nDescribes a generic event.\nEmitted when the event loop is being shut down.\nEmitted when the application has received a memory warning.\nDescribes a button of a mouse controller.\nEmitted when new events arrive from the OS to be processed.\nEmitted when the application has been resumed.\nEmitted when the application has been suspended.\nEmitted when an event is sent from …\nEmitted when the OS sends an event to a winit window.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVersion of the OrbitKit library (deprecated, use orbit …\nRe-export of common components for convenience\nButton component that follows Orbit’s design system\nProperties for the Button component\nButton size variants\nButton style variants\nWhether the button is disabled\nWhether the button is disabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nClick event handler\nClick event handler\nSize variant of the button\nSize variant of the button\nText content of the button\nText content of the button\nVisual style variant of the button\nVisual style variant of the button\nCard component\nCard props\nCard border radius\nCard border radius\nWhether the card has a border\nWhether the card has a border\nChild content\nChild content\nCard elevation (shadow level)\nCard elevation (shadow level)\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCard padding\nCard padding\nCard title\nCard title\nInput component\nInput props\nWhether the input is disabled\nWhether the input is disabled\nInput error message\nInput error message\nReturns the argument unchanged.\nReturns the argument unchanged.\nInput helper text\nInput helper text\nInput type (text, password, email, etc.)\nInput type (text, password, email, etc.)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInput label\nInput label\nOn change handler\nOn change handler\nInput placeholder\nInput placeholder\nWhether the input is required\nWhether the input is required\nInput value\nInput value\nLayout alignment\nAlign items at the center\nJustify items at the center\nVertical layout\nLayout direction\nAlign items at the end\nJustify items at the end\nLayout justification\nLayout component\nLayout props\nHorizontal layout\nSpace around items\nSpace between items\nSpace evenly between items\nAlign items at the start\nJustify items at the start\nStretch items to fill the container\nLayout alignment\nLayout alignment\nChild content\nChild content\nLayout direction (row, column)\nLayout direction (row, column)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLayout gap\nLayout gap\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLayout justification\nLayout justification\nLayout padding\nLayout padding\nTheme for OrbitKit\nTheme provider component\nTheme provider props\nBackground color\nBorder radius\nChild content\nChild content\nError color\nFont family\nFont size\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInfo color\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrimary color\nSecondary color\nSuccess color\nText color\nTheme\nTheme\nWarning color\nColor utilities\nMath utilities\nString utilities\nDarken a color by a percentage\nConvert HSL to RGB\nLighten a color by a percentage\nConvert RGB to HSL\nClamp a value between a minimum and maximum\nLinear interpolation between two values\nCapitalize the first letter of a string\nTruncate a string to a maximum length\nRepresents a parsed .orbit file\nMain parser for .orbit files\nRepresents a node in the template tree\nAbstract Syntax Tree definitions for .orbit files\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse an .orbit file into an AST\nParse an .orbit file from a file path\nSplit an .orbit file into its constituent sections\nParser for template sections of .orbit files\nTokenizer for .orbit files\nRepresents an attribute value that can be either static or …\nRepresents a lifecycle hook\nTypes of lifecycle hooks\nRepresents a method definition\nRepresents a parsed .orbit file\nRepresents a component property definition\nRepresents the script section\nRepresents a state field definition\nRepresents the style section\nRepresents a CSS rule\nRepresents a node in the template tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new AST from parsed sections\nParses template sections in .orbit files\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new template parser\nParse the template section into an AST\nParse an element node\nParse an expression inside {{ }}\nToken types that can appear in a template\nTokenizes an input string into a sequence of tokens\nAdvance to the next character\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new tokenizer for the given input\nGet the next token from the input\nPeek at the next character without consuming it\nPeek at the character after the next one\nRead an identifier\nRead a number literal\nRead a string literal\nRead a complete tag (opening, closing, or self-closing)\nRead a text node\nSkip whitespace characters\nAutomatically detect platform\nDesktop platform (Windows, macOS, Linux)\nTrait for platform adapters\nTypes of platforms available\nWeb platform (WASM)\nFactory function to create the appropriate platform adapter\nReturns the argument unchanged.\nInitialize the platform adapter\nCalls <code>U::from(self)</code>.\nStart the main application loop\nShutdown the platform adapter\nDescribes a button of a mouse controller.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAutomatic selection based on platform\nRenderer composition for hybrid UIs\nRenderer interface\nTypes of renderers available\nSkia-based renderer\nWebGL-based renderer (for web)\nWGPU-based renderer\nClean up resources\nCreate a default composite renderer\nCreate a renderer of the specified type\nFlush any pending operations\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize the renderer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the renderer name\nCreate a new composite renderer with the specified …\nRender a component tree\nThe 2D renderer (usually Skia)\nThe 3D renderer (usually WGPU)\nWGPU renderer base functionality\nBegin frame\nEnd frame\nContains the error value\nGeneral error\nOpenGL error\nInitialize with dimensions\nInitialization error\nContains the success value\nRender node\nCustom error type for renderer errors\nA message sent to the renderer thread\nResult from renderer operations\nShutdown renderer\nSkia API error\nSkia-based renderer implementation\nSkia renderer state\nGet current transform\nDraw an animated circle\nRender a test circle\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSkia GPU context\nCurrent height\nInitialize Skia state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Skia renderer\nPop transform from the stack\nPush a transform onto the stack\nRenderer state\nSkia render surface\nCurrent transform stack\nCurrent width\nCircular dependency detected\nRepresents a computed state value that depends on other …\nA reactive effect that runs when its dependencies change\nInvalid state transition\nA computed value that derives from other reactive values\nReactive scope that manages signals, effects, and computed …\nA reactive signal that holds a value\nSignal has been dropped or is no longer accessible\nErrors that can occur in the reactive system\nRepresents a reactive value that can be observed for …\nState management for Orbit applications\nPhantom data for type\nCompute function\nCreate computed state dependent on other state\nState container\nState container\nCreate a new state value\nCreate a new computed value\nCreate a new effect that runs when dependencies change\nCreate a new signal with an initial value\nDependencies\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current value\nGet current value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new computed state\nCreate a new state container\nNotify subscribers of a change to a value\nNew scope-based reactive system for Orbit UI\nSet new value\nSubscribe to state changes\nType ID for this state\nType ID for this state\nUpdate value with a function\nCircular dependency detected\nA reactive effect that runs when its dependencies change\nInvalid state transition\nA computed value that derives from other reactive values\nReactive scope that manages signals, effects, and computed …\nA reactive signal that holds a value\nSignal has been dropped or is no longer accessible\nErrors that can occur in the reactive system\nCreate a new computed value\nCreate a new effect that runs when dependencies change\nCreate a new signal with an initial value\nGet the current value of the signal\nGet the computed value, recalculating if necessary\nGet a mutable reference to the signal’s value\nCreate a new reactive scope\nExecute the effect\nSet the signal’s value and trigger updates\nUpdate the signal’s value with a function\nCSS property\nCSS selector\nCSS selector specificity (a, b, c)\nStyle properties for a UI element\nErrors that can occur in styling operations\nCSS rule with selector, properties, and metadata\nCSS stylesheet\nAdd a rule to the stylesheet\nApply component scoping to selectors\nBackground color\nBorder color\nBorder radius in pixels\nBorder width in pixels\nCalculate selector specificity (a, b, c) a = ID selectors …\nText color\nFont family\nFont size in pixels\nFont weight (normal, bold, etc)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight in pixels or percentage\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMargin in pixels (top, right, bottom, left)\nApply another style on top of this one\nName of the property\nCreate a new StyleRule\nCreate a new empty stylesheet\nCreate a new empty style\nPadding in pixels (top, right, bottom, left)\nParse CSS text into a stylesheet\nProperties for this selector\nRules in this stylesheet\nWhether this rule is scoped to a component\nSelector text\nThe CSS selector(s) for this rule\nSource order for breaking specificity ties\nThe computed specificity of the selector\nValue of the property\nWidth in pixels or percentage")