name: Rust CI

on:
  workflow_call:
    inputs:
      workspace-path:
        required: false
        type: string
        default: '.'
      rust-version:
        required: false
        type: string
        default: 'stable'

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ inputs.workspace-path }} -> target
            
      - name: Check code formatting
        working-directory: ${{ inputs.workspace-path }}
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        working-directory: ${{ inputs.workspace-path }}
        run: cargo clippy --all-targets --all-features -- -D warnings
        
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: check
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ inputs.workspace-path }} -> target
      
      - name: Run tests
        working-directory: ${{ inputs.workspace-path }}
        run: cargo test --all-features
        
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            ${{ inputs.workspace-path }} -> target
      
      - name: Build release
        working-directory: ${{ inputs.workspace-path }}
        run: cargo build --release --target ${{ matrix.target }}
