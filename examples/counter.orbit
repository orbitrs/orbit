<template>
  <div class="counter">
    <h2>{{ title }}</h2>
    <div class="counter-display">{{ count }}</div>
    <div class="counter-controls">
      <button class="counter-button" @click="increment">+</button>
      <button class="counter-button" @click="decrement">-</button>
      <button class="counter-button reset" @click="reset">Reset</button>
    </div>
  </div>
</template>

<style>
.counter {
  font-family: Arial, sans-serif;
  max-width: 300px;
  margin: 0 auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
  color: #333;
  margin-top: 0;
}

.counter-display {
  font-size: 48px;
  text-align: center;
  padding: 20px 0;
  font-weight: bold;
  color: #0070f3;
}

.counter-controls {
  display: flex;
  justify-content: center;
  gap: 10px;
}

.counter-button {
  background-color: #0070f3;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 8px 16px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.2s;
}

.counter-button:hover {
  background-color: #0060df;
}

.counter-button.reset {
  background-color: #f44336;
}

.counter-button.reset:hover {
  background-color: #d32f2f;
}
</style>

<script>
use orbitrs::prelude::*;

/// A simple counter component.
pub struct Counter {
    /// The title of the counter
    title: String,
    /// The current count
    count: i32,
    /// The initial count
    initial: i32,
}

/// Properties for the Counter component
pub struct CounterProps {
    /// The title of the counter
    pub title: String,
    /// The initial count value
    pub initial: Option<i32>,
}

impl Props for CounterProps {}

impl Component for Counter {
    type Props = CounterProps;
    
    fn new(props: Self::Props) -> Self {
        let initial = props.initial.unwrap_or(0);
        Self {
            title: props.title,
            count: initial,
            initial,
        }
    }
    
    fn render(&self) -> String {
        // In a real implementation, this would be automatically generated
        // from the template. This is just a placeholder.
        "Counter component".to_string()
    }
    
    fn mounted(&mut self) {
        // Called when the component is mounted to the DOM
        println!("Counter component mounted");
    }
    
    fn updated(&mut self) {
        // Called when the component's state changes
        println!("Counter updated to {}", self.count);
    }
    
    fn unmounted(&mut self) {
        // Called when the component is removed from the DOM
        println!("Counter component unmounted");
    }
}

impl Counter {
    /// Increment the counter by 1
    pub fn increment(&mut self) {
        self.count += 1;
    }
    
    /// Decrement the counter by 1
    pub fn decrement(&mut self) {
        self.count -= 1;
    }
    
    /// Reset the counter to its initial value
    pub fn reset(&mut self) {
        self.count = self.initial;
    }
}
</script>
